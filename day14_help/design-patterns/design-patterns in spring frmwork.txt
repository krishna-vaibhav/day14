Interview question
Why have you used spring framework in your project ?

Spring : Design Patterns Used in Java Spring Framework

1.
Dependency injection/ or IoC (inversion of control) – Is the main principle behind loose coupling of layers.

2. Factory – Spring uses factory pattern to create objects of beans using Application Context reference
eg : refer to eg code in spring & Java SE (ApplicationContext & its getBean method)


3. Proxy – used heavily in AOP, and remoting.
eg : @Transactional class is proxied by spring as an example of AOP proxy

4. Singleton – By default, beans defined in spring config file (xml) are only created once. No matter how many calls were made using getBean() method, it will always have only one bean. This is because, by default all beans in spring are singletons.
This can be overridden by using Prototype bean scope.Then spring will create a new bean object for every request.

5. Model View Controller – The advantage with Spring MVC is that your controllers are POJOs as opposed to being servlets. This makes for easier testing of controllers. One thing to note is that the controller is only required to return a logical view name, and the view selection is left to a separate ViewResolver. This makes it easier to reuse controllers for different view technologies.

6. Front Controller – Spring provides DispatcherServlet to ensure an incoming request gets dispatched to your controllers.

7. View Helper – Spring has a number of custom JSP tags, and view resolvers, to assist in separating code(B.L)  from presentation in views.

8. Template method – used extensively to deal with boilerplate repeated code (such as closing connections cleanly, etc..). For example JdbcTemplate, JmsTemplate,JdbcTemplate,JpaTemplate,RestTemplate